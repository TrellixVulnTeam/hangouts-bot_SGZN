import hangups
from hangups import hangouts_pb2 
from hangups.hangouts_pb2 import ParticipantId

import asyncio
import random
from collections import defaultdict
from datetime import datetime, tzinfo
import json

from utils import *
#from text_2048 import play_game

class Handler:
    def __init__(self):
        self.keywords = {
                "good bot": "nyaa, thanku~~",
                "bad bot": "nuu dun pweese~~ >.<",
                "headpat": "uwu thanku",
                "yamete": "kudasai!~~",
                "ping": "pong",
                "pong": "ping",
                "saber": "hi"
        }
        self.commands = {
                "/help": self.help,
                "/rename": self.rename,
                "/say": self.say,
                "/rickroll": self.rickroll,
                "/quit": self.quit,
                "/reset": self.reset,
                "/id": self.id,
                "/kick": self.kick,
                "/register": self.register,
                "/balance": self.balance,
                "/mine": self.mine,
                "/save": self.save,
                "/shop": self.shop,
                "/buy": self.buy,
                "/give": self.give,
                "/id_give": self.id_give,
                "/profile": self.profile,
                "/leaderboard": self.leaderboard
        }
        self.images = {
                "/gay": "images/gay.jpg",
                "/math": "images/math.jpg",
                "/praise": "images/praise.jpg",
                "/goddammit": "images/goddammit.jpg",
                "/heymister": "images/heymister.png"
            }

        self.cooldowns = defaultdict(dict) 
        self.admins = [114207595761187114730] # fill in yourself (store as int)
        random.seed(datetime.now())

        with open("data.json") as f:
            self.data = json.load(f)

    # utility
    async def help(self, bot, event):
        user, conv = getUserConv(bot, event)
        if self.cooldown(user, event, 10):
            return

        f = open("text/help.txt", 'r')
        contents = f.read()
        await conv.send_message(toSeg(contents))
        f.close()

    async def rename(self, bot, event):
        user, conv = getUserConv(bot, event)
        if self.cooldown(user, event, 3):
            return
        
        try:
            await conv.rename(event.text.split(' ', 1)[1])
        except:
            await conv.send_message(toSeg("Format: /rename {name}"))

    async def say(self, bot, event):
        user, conv = getUserConv(bot, event)
        if self.cooldown(user, event, 3):
            return

        try:
           await conv.send_message(toSeg(event.text.split(' ', 1)[1]))
        except:
            await conv.send_message(toSeg("Format: /say {message}"))
    async def id(self, bot, event):
        user, conv = getUserConv(bot, event)
        if self.cooldown(user, event, 10):
            return

        try:
            await conv.send_message(toSeg(user.id_[0]))
        except:
            await conv.send_message(toSeg(str("Something went wrong!")))

    async def kick(self, bot, event):
        user, conv = getUserConv(bot, event)
        arg1 = event.text.lower().split()[1]
        users = conv.users
        ids = []
        kick_users = []

        try:
            for user in users:
                if arg1 in user.full_name.lower():
                    kick_users.append(user)

            if not kick_users:
                await conv.send_message(toSeg("Nobody in this conversation goes by that name"))
                return
            # only reason i figured this out was because of hangupsbot, so thank you so much https://github.com/xmikos/hangupsbot/blob/master/hangupsbot/commands/conversations.py

            ids = [ParticipantId(gaia_id = user.id_.gaia_id, chat_id = conv.id_) for user in kick_users]

            for kick_id in ids:
                request = hangouts_pb2.RemoveUserRequest(request_header = bot.client.get_request_header(), participant_id = kick_id, event_request_header = conv._get_event_request_header())
                res = await bot.client.remove_user(request)
                conv.add_event(res.created_event)
        except:
            await conv.send_message(toSeg("Yeah don't use this command lol"))

    # fun
    async def rickroll(self, bot, event):
        user, conv = getUserConv(bot, event)
        if self.cooldown(user, event, 3):
            return

        try:
            await conv.send_message(toSeg("https://youtu.be/dQw4w9WgXcQ"))
        except:
            await conv.send_message(toSeg("Something went wrong!"))

    async def register(self, bot, event):
        user, conv = getUserConv(bot, event)
        userID = user.id_[0]
        
        if userID in self.data["users"]:
            await conv.send_message(toSeg("You are already registered!"))
            return

        try:
            self.data["users"][userID] = user; self.data["users"][userID] = {}
            self.data["users"][userID]["balance"] = 0
            self.data["users"][userID]["pick"] = "Copper Pick"
            self.data["users"][userID]["name"] = user.full_name

            await conv.send_message(toSeg("Successfully registered!"))
            with open("data.json", "w") as f:
                json.dump(self.data, f)
        except Exception as e:
            await conv.send_message(toSeg("Failed to register!"))
            print(e)

    async def balance(self, bot, event):
        user, conv = getUserConv(bot, event)
        userID = user.id_[0]

        if not userID in self.data["users"]:
            await conv.send_message(toSeg("You are not registered! Use /register"))
            return

        try:
            balance = self.data["users"][userID]["balance"]
            await conv.send_message(toSeg(user.full_name + ", you currently have " + str(balance) + " Saber Dollars!"))
        except Exception as e:
            await conv.send_message(toSeg("Failed to retrieve balance info!"))
            print(e)

    async def mine(self, bot, event):
        user, conv = getUserConv(bot, event)
        userID = user.id_[0]

        if not userID in self.data["users"]:
            await conv.send_message(toSeg("You are not registered! Use /register"))
            return

        i = self.cooldown(user, event, 5)
        if i:
            await conv.send_message(toSeg("On cooldown. Please wait " + str(i) + " second(s)."))
            return

        try:
            playerPick = self.data["shop"]["pick"][self.data["users"][userID]["pick"]]
            mined_amt = random.randint(playerPick["range"][0], playerPick["range"][1])

            self.data["users"][userID]["balance"] += mined_amt
            await conv.send_message(toSeg(user.full_name + ", you mined " + str(mined_amt) + " Saber Dollars!"))
            with open("data.json", "w") as f:
                json.dump(self.data, f)
        except Exception as e:
            await conv.send_message(toSeg("Failed to retrieve balance info!"))
            print(e)

    async def shop(self, bot, event):
        user, conv = getUserConv(bot, event)

        if self.cooldown(user, event, 20):
            return

        try:
            with open("text/shop.txt", "r") as f:
                s = f.read()
                await conv.send_message(toSeg(s))
        except:
            await conv.send_message(toSeg("Failed to retrieve shop!"))
    
    async def buy(self, bot, event):
        user, conv = getUserConv(bot, event)
        userID = user.id_[0]
        try:
            arg1 = event.text.split()[1].lower()
            arg2 = event.text.split(' ', 2)[2].lower().title()

            if not userID in self.data["users"]:
                await conv.send_message(toSeg("You are not registered!  Use /register"))
                return
            
            if arg1 not in self.data["shop"] or arg2 not in self.data["shop"][arg1]:
                await conv.send_message(toSeg("That item doesn't exist!"))
                return
            else:
                if self.data["users"][userID]["balance"] < self.data["shop"][arg1][arg2]["price"]:
                    await conv.send_message(toSeg("You don't have enough money for that!"))
                    return
                elif self.data["shop"][arg1][self.data["users"][userID][arg1]]["value"] == self.data["shop"][arg1][arg2]["value"]:
                    await conv.send_message(toSeg("You already have that pick!"))
                    return
                elif self.data["shop"][arg1][self.data["users"][userID][arg1]]["value"] > self.data["shop"][arg1][arg2]["value"]:
                    await conv.send_message(toSeg("You already have a pick better than that!"))
                    return
                else:
                    self.data["users"][userID][arg1] = self.data["shop"][arg1][arg2]["name"]
                    self.data["users"][userID]["balance"] -= self.data["shop"][arg1][arg2]["price"]
                    await conv.send_message(toSeg("Purchase successful!"))
                    with open("data.json", "w") as f:
                        json.dump(self.data, f)
        except:
            await conv.send_message(toSeg("Format: /buy {type} {item}"))
    
    async def give(self, bot, event):
        user, conv = getUserConv(bot, event)
        users = conv.users
        userID = user.id_[0]
        give_users = []

        try:
            arg1 = event.text.split(' ', 1)[1]
            arg1 = arg1.rsplit(' ', 1)[0]

            arg2 = int(event.text.split()[-1])
            
            for u in users:
                if arg1 in u.full_name:
                    give_users.append(u)

            if userID not in self.data["users"]:
                await conv.send_message(toSeg("You are not registered! Use /register"))
                return

            elif len(give_users) != 1:
                await conv.send_message(toSeg("Error finding that user! Try /id_give instead."))
                return
            
            elif give_users[0].id_[0] not in self.data["users"]:
                await conv.send_message(toSeg("That user has not registered!"))
                return

            elif give_users[0].id_[0] == user.id_[0]:
                await conv.send_message(toSeg("That user is you!"))
                return

            elif self.data["users"][userID]["balance"] < arg2:
                await conv.send_message(toSeg("You don't have enough money to do that!"))
                return
            
            else:
                self.data["users"][userID]["balance"] -= arg2
                self.data["users"][give_users[0].id_[0]]["balance"] += arg2
                await conv.send_message(toSeg("Successfully given " + str(arg2) + " Saber Dollars to " + give_users[0].full_name))
                await conv.send_message(toSeg("That user now has " + str(self.data["users"][give_users[0].id_[0]]["balance"]) + " Saber Dollars"))
                with open("data.json", "w") as f:
                    json.dump(self.data, f)

        except:
            await conv.send_message(toSeg("Format: /give {user} {money}"))

    async def id_give(self, bot, event):
        user, conv = getUserConv(bot, event)
        userID = user.id_[0]

        try:
            give_user = event.text.split()[1]
            give_money = int(event.text.split()[-1])

            if userID not in self.data["users"]:
                await conv.send_message(toSeg("You are not registered! Use /register"))
                return

            elif give_user not in self.data["users"]:
                await conv.send_message(toSeg("That user has not registered!"))
                return
            
            elif userID == give_user:
                await conv.send_message(toSeg("That user is you!"))
                return

            elif self.data["users"][userID]["balance"] < give_money:
                await conv.send_message(toSeg("You don't have enough money to do that!"))
                return

            else:
                self.data["users"][userID]["balance"] -= give_money
                self.data["users"][give_user]["balance"] += give_money
                await conv.send_message(toSeg("Successfully given " + str(give_money) + " Saber Dollars to ID: " + str(give_user)))
                await conv.send_message(toSeg("That user now has " + str(self.data["users"][give_user]["balance"]) + " Saber Dollars"))
                with open("data.json", "w") as f:
                    json.dump(self.data, f)
        except:
            await conv.send_message(toSeg("Format: /id_give {id} {money}"))
            
    async def profile(self, bot, event):
        user, conv = getUserConv(bot, event)
        dataUsers = self.data["users"]

        try:
            if len(event.text.split()) > 1:
                name = event.text.split(' ', 1)[1]
                possible_users = []

                for user in self.data["users"]:
                    if name in self.data["users"][user]["name"]:
                        possible_users.append(user)
                
                if len(possible_users) == 0:
                    await conv.send_message(toSeg("No users go by that name!"))
                    return

                elif len(possible_users) > 1:
                    await conv.send_message(toSeg(str(len(possible_users)) + "possible user(s) go by that name:\n"))

                    for user in possible_users:
                        await conv.send_message(toSeg("**Name:** " + dataUsers[user]["name"] + '\n' + "**Balance:** " + str(dataUsers[user]["balance"]) + '\n' + "**ID:** " + user + '\n\n'))
                else:
                    await conv.send_message(toSeg("**Name:** " + dataUsers[possible_users[0]]["name"] + '\n' + "**Balance:** " + str(dataUsers[possible_users[0]]["balance"]) + '\n' + "**ID:** " + possible_users[0]))


            else:
                if user.id_[0] in self.data["users"]:
                    await conv.send_message(toSeg("**Name:** " + self.data["users"][user.id_[0]]["name"] + '\n' + "**Balance:** " + str(self.data["users"][user.id_[0]]["balance"]) + '\n' + "**ID:** " + user.id_[0]))
        except Exception as e:
                    await conv.send_message(toSeg("Failed to retrieve user info!"))
                    await conv.send_message(toSeg(e))
                    print(e)



    async def leaderboard(self, bot, event):
        user, conv = getUserConv(bot, event)
        users = {}
        cnt = 1
        leaderboard = ""

        try:
            for user in self.data["users"]:
                users[self.data["users"][user]["name"]] = self.data["users"][user]["balance"]
            
            sorted_users = {key: value for key, value in sorted(users.items(), key=lambda x: x[1], reverse=True)}

            for key, value in sorted_users.items():
                if cnt == 6:
                    break

                leaderboard += str(cnt) + '. ' + key + ": " + str(value) + '\n'
                cnt += 1
            await conv.send_message(toSeg(leaderboard))
        except:
            await conv.send_message(toSeg("Failed retrieving leaderboard info!"))


    # config 
    async def quit(self, bot, event):
        user, conv = getUserConv(bot, event)
        if self.cooldown(user, event, 30):
            return

        try:
            if self.isAdmin(user):
                await conv.send_message(toSeg("Saber out!"))
                await bot.client.disconnect()
            else:
                await conv.send_message(toSeg("bro wtf u can't use that"))
        except:
                await conv.send_message(toSeg("Something went wrong!"))

    async def reset(self, bot, event):
        user, conv = getUserConv(bot, event)

        try:
            arg1 = '/' + event.text.lower().split()[1]
            if self.isAdmin(user):
                if arg1 in self.cooldowns[user]:
                    self.cooldowns[user][arg1] = datetime.min.replace(tzinfo=None)
                else:
                    await conv.send_message(toSeg("Format: /reset {command}"))
            else:
                await conv.send_message(toSeg("bro wtf u can't use that"))
        except:
            await conv.send_message(toSeg("Format: /reset {command}"))
    
    async def save(self, bot, event):
        user, conv = getUserConv(bot, event)

        try:
            if self.isAdmin(user):
                with open("data.json", "w") as f:
                    json.dump(self.data, f)
                await conv.send_message(toSeg("Successfully saved!"))
            else:
                await conv.send_message(toSeg("bro wtf u can't use that"))
        except:
                await conv.send_message(toSeg("Something went wrong!"))

    # helpers
    def cooldown(self, user, event, cooldown):
        text = event.text.lower()
        strippedTime = event.timestamp.replace(tzinfo=None)

        if user in self.cooldowns and text.split()[0] in self.cooldowns[user]:
            if (strippedTime - self.cooldowns[user][text.split()[0]]).seconds < cooldown:
                return cooldown - (strippedTime - self.cooldowns[user][text.split()[0]]).seconds
            else:
                self.cooldowns[user][text.split()[0]] = strippedTime 
        else:
            self.cooldowns[user][text.split()[0]] = strippedTime

    def isAdmin(self, user):
        print(type(user.id_[0]))
        if int(user.id_[0]) in self.admins:
            return True
